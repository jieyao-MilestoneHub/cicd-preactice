# Using the Serverless Framework to automatically deploy a FastAPI application to AWS Lambda 
# and provide HTTPS support through API Gateway.
service: fastapi-lambda-crud

provider:
  name: aws
  runtime: python3.11
  region: us-east-1
  memorySize: 128
  timeout: 30
  stage: ${opt:stage, 'dev'}  # Default to 'dev', can specify the stage via command-line option
  versionFunctions: true      # Enable versioning for the functions

functions:
  app:
    handler: app/lambda_handler.lambda_handler   # Defines the Lambda function entry point. This points to the lambda_handler function in the app/lambda_handler.py file.
    events:
      - http:                                   # Specifies an HTTP event to trigger the Lambda function
          path: hello                           # Set the URL path to '/hello'
          method: get                           # HTTP method: GET
          cors: true                            # Enable Cross-Origin Resource Sharing (CORS)

    deploymentSettings:
      type: Linear10PercentEvery1Minute         # Gradually deploy the new version, shifting 10% of traffic every minute
      alias: Live                               # Alias for the new function version
      preTrafficHook: preHook                   # Function to run before traffic is switched to the new version
      postTrafficHook: postHook                 # Function to run after traffic is switched to the new version
      alarms:                                   # Set up CloudWatch alarms to monitor errors
        - FooAlarm           # Logical ID (A unique identifier defined in the CloudFormation template)
        - name: BarAlarm     # Resource (Name of an existing AWS resource)

  preHook:
    handler: app.hooks.pre_handler                # Function that runs before switching traffic

  postHook:
    handler: app.hooks.post_handler               # Function that runs after switching traffic

plugins:
  - serverless-python-requirements            # Plugin for packaging and handling Python dependencies
  - serverless-wsgi                           # Plugin for adapting FastAPI to work with AWS Lambda
  - serverless-plugin-canary-deployments      # Plugin for managing canary deployments (gradual traffic shifting)

custom:
  pythonRequirements:
    dockerizePip: true                        # Use Docker to package dependencies, ensuring compatibility with the Lambda environment
  wsgi:
    app: app.main.app                         # Points to the FastAPI app in app/main.py

resources:
  Resources:
    FooAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: LambdaFunctionErrors-FooAlarm-${self:provider.stage}   # Name for the CloudWatch alarm
        MetricName: Errors                                                # Metric to monitor (in this case, Lambda errors)
        Namespace: AWS/Lambda                                             # Namespace for Lambda metrics
        Statistic: Sum                                                    # Sum of errors
        Period: 300                                                       # Time period in seconds (5 minutes)
        EvaluationPeriods: 1                                              # Number of evaluation periods before triggering an alarm
        Threshold: 1                                                      # Trigger the alarm if there is at least 1 error
        ComparisonOperator: GreaterThanOrEqualToThreshold                 # Trigger alarm if errors are greater than or equal to the threshold

    BarAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: LambdaFunctionErrors-BarAlarm-${self:provider.stage}   # Name for the second CloudWatch alarm
        MetricName: Errors                                                # Monitor Lambda errors
        Namespace: AWS/Lambda
        Statistic: Sum
        Period: 300
        EvaluationPeriods: 1
        Threshold: 1
        ComparisonOperator: GreaterThanOrEqualToThreshold
